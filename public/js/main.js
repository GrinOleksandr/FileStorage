/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "public/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("setLocalStorageObjectItem('currentPath', '/');\nsetLocalStorageObjectItem('currentFolder', '/');\nvar state = {};\ndocument.addEventListener('contextmenu', function () {\n  console.log(\"dropdown removed\", document.getElementsByClassName(\"dropdown-menu\")[0]);\n\n  if (document.getElementsByClassName(\"dropdown-menu\")[0]) {\n    document.getElementsByClassName(\"dropdown-menu\")[0].remove();\n  }\n});\nvar ListOfFiles = document.getElementById('files-list');\nListOfFiles.addEventListener('contextmenu', function (ev) {\n  ev.preventDefault();\n});\nListOfFiles.addEventListener('click', function (ev) {\n  ev.preventDefault();\n  ev.stopPropagation();\n\n  if (document.getElementsByClassName(\"dropdown-menu\")[0]) {\n    document.getElementsByClassName(\"dropdown-menu\")[0].remove();\n  }\n});\nvar filePath = document.getElementById('filePath');\nfilePath.querySelector(\"span\").addEventListener('click', function () {\n  renderFileStructure(\"/\");\n});\nvar rootFolder = document.createElement('span');\nrootFolder.className = \"file-path_item\";\nrootFolder.innerText = \"/\";\nrootFolder.addEventListener('click', function () {\n  renderFileStructure(\"/\");\n  renderFilePath();\n});\nfilePath.appendChild(rootFolder); //***********************************UPLOAD***********************************//\n//upload via drag&drop\n\nvar DropZone = document.getElementById(\"upload-container\");\nDropZone.addEventListener('dragover', function (e) {\n  e.stopPropagation();\n  e.preventDefault();\n  DropZone.classList.add('dragover');\n});\nDropZone.addEventListener('dragenter', function (e) {\n  e.stopPropagation();\n  e.preventDefault();\n  DropZone.classList.add('dragover');\n});\nDropZone.addEventListener('dragleave', function (e) {\n  e.stopPropagation();\n  e.preventDefault();\n  var dx = e.pageX - DropZone.getBoundingClientRect().left + pageXOffset;\n  var dy = e.pageY - DropZone.getBoundingClientRect().top + pageYOffset;\n\n  if (dx < 0 || dx > DropZone.clientWidth || dy < 0 || dy > DropZone.clientHeight) {\n    DropZone.classList.remove('dragover');\n  }\n});\nDropZone.addEventListener('drop', function (e) {\n  e.stopPropagation();\n  e.preventDefault();\n  var files = e.dataTransfer.files;\n  DropZone.classList.remove('dragover');\n  console.log(e.dataTransfer.items[0]);\n  FileInput.files = files;\n  ajaxSendFiles();\n});\nvar createFolderBtn = document.getElementById('create-folder');\ncreateFolderBtn.addEventListener('click', Modal); //upload via input field\n\nvar FileInput = document.getElementById(\"file-input\");\nFileInput.addEventListener('focus', function () {\n  return DropZone.querySelector('label').classList.add('focus');\n});\nFileInput.addEventListener('blur', function () {\n  return DropZone.querySelector('label').classList.remove('focus');\n});\nFileInput.addEventListener('change', function (e) {\n  e.preventDefault();\n  console.log(\"files  \", this.files);\n\n  if (this.files[0].isDirectory) {\n    console.log(\"DIRECTORY!! : \".concat(this.files[0]));\n  }\n\n  [].forEach.call(this.files, function (item) {\n    if (item.isDirectory) {\n      console.log(\"DIRECTORY!! : \".concat(item));\n    }\n  });\n  ajaxSendFiles();\n});\nvar moveBtn = document.getElementById('move');\nvar pasteBtn; /////SUBMITTING via AJAX\n\nfunction ajaxSendFiles() {\n  var formData = new FormData(DropZone);\n  fetch(\"/file/upload?parent=\".concat(getLocalStorageObjectItem('currentFolder')), {\n    method: 'POST',\n    headers: {\n      accept: 'application/json'\n    },\n    body: formData\n  }).then(function (response) {\n    console.log('Files Uploaded!');\n    renderFileStructure(getLocalStorageObjectItem('currentFolder'));\n    return response.text();\n  }).catch(function (error) {\n    return console.log(\"Данные не отправленны: \" + error);\n  });\n} //**********************************************************************//\n\n\nrenderFileStructure();\n\nfunction renderFileStructure() {\n  var folder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"/\";\n  fetch(\"http://127.0.0.1:8000/file/listfiles?folder=\".concat(folder), {\n    method: 'POST'\n  }).then(function (response) {\n    return response.text();\n  }).then(function (textOfResponse) {\n    return JSON.parse(textOfResponse);\n  }).then(function (array) {\n    addAllToList(array);\n  }).catch(function (error) {\n    return console.log(\"Данные не получены: \" + error);\n  });\n}\n\nfunction addAllToList(array) {\n  ListOfFiles.innerHTML = \"\";\n  array.forEach(function (item) {\n    addItemFromServer(item);\n  });\n}\n\nfunction addItemFromServer(element) {\n  var newItem = document.createElement(\"li\");\n  newItem.className = \"file-container\";\n  newItem.dataset.parent = element.parent;\n  newItem.addEventListener('click', function (ev) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    activateItem(ev.currentTarget);\n  });\n\n  if (element.isFolder) {\n    newItem.addEventListener('dblclick', function (ev) {\n      openFolder(element.name, element.fileId);\n    });\n  }\n\n  function openFolder(name, id) {\n    setLocalStorageObjectItem('currentFolder', id);\n    renderFileStructure(id);\n    addToFilePath(element);\n  }\n\n  function activateItem(target) {\n    // if(document.querySelector(\".item-active\")){\n    //     document.querySelector(\".item-active\").classList.remove('item-active');\n    // }\n    target.classList.toggle('item-active');\n  }\n\n  newItem.addEventListener('contextmenu', function (ev) {\n    console.log(ev);\n    ev.preventDefault();\n    ev.stopPropagation();\n\n    if (document.getElementsByClassName(\"dropdown-menu\")[0]) {\n      document.getElementsByClassName(\"dropdown-menu\")[0].remove();\n    }\n\n    var cors = {\n      x: ev.clientX,\n      y: ev.clientY\n    };\n    dropDown(ev.currentTarget, cors);\n  });\n  newItem.dataset.id = element.fileId;\n  var itemName = document.createElement(\"span\");\n  itemName.innerText = element.name;\n  itemName.className = \"file-name\";\n\n  function chooseIcon(mimetype) {\n    if (mimetype.split('/')[0] === \"application\") {\n      var applicationTypes = {\n        msword: './img/file-type-icons/doc.svg',\n        pdf: './img/file-type-icons/pdf.svg',\n        ppt: './img/file-type-icons/ppt.svg',\n        pptx: './img/file-type-icons/ppt.svg',\n        zip: './img/file-type-icons/zip.svg',\n        rar: './img/file-type-icons/zip.svg' // 'vnd.ms-excel': './img/file-type-icons/xls.svg'\n\n      };\n      return applicationTypes[mimetype.split('/')[1]] || './img/file-type-icons/application.svg';\n    }\n\n    var fileTypes = {\n      folder: './img/file-type-icons/folder.webp',\n      application: './img/file-type-icons/application.svg',\n      audio: './img/file-type-icons/mp3.svg',\n      image: './img/file-type-icons/jpg.svg',\n      text: './img/file-type-icons/txt.svg',\n      video: './img/file-type-icons/avi.svg'\n    };\n    return fileTypes[mimetype.split('/')[0]] || './img/file-type-icons/file.svg';\n  }\n\n  var fileIcon = document.createElement(\"span\");\n  fileIcon.className = \"file-icon\";\n  fileIcon.style.backgroundImage = \"url(\".concat(chooseIcon(element.mimetype), \")\"); // `url(./img/file-type-icons/doc.png)`;\n  // let itemMimeType = document.createElement(\"span\");\n  // itemMimeType.innerText = `type: ${element.mimetype}`;\n  //\n  // let itemLink = document.createElement(\"span\");\n  // itemLink.innerText = `link: ${element.link}`;\n  //\n  // let itemUploadDate = document.createElement(\"span\");\n  // itemUploadDate.innerText = `date: ${element.uploadDate}`;\n  //\n  // let itemOwner = document.createElement(\"span\");\n  // itemOwner.innerText =`owner: ${element.owner}`;\n  //\n  // let itemAccess = document.createElement(\"span\");\n  // itemAccess.innerText =`access: ${element.access}` ;\n  //\n  // let itemParent = document.createElement(\"span\");\n  // itemParent.innerText =`parent: ${element.parent}` ;\n  //\n  // let itemFolder = document.createElement(\"span\");\n  // itemFolder.innerText = `folder: ${element.folder}`;\n\n  newItem.appendChild(fileIcon);\n  newItem.appendChild(itemName); // newItem.appendChild(itemMimeType);\n  // newItem.appendChild(itemLink);\n  // newItem.appendChild(itemUploadDate);\n  // newItem.appendChild(itemOwner);\n  // newItem.appendChild(itemAccess);\n  // newItem.appendChild(itemParent);\n  // newItem.appendChild(itemFolder);\n\n  ListOfFiles.appendChild(newItem);\n}\n\nfunction dropDown(target, cors) {\n  var fileId = target.dataset.id;\n  var downloadBtn = document.createElement('li');\n  downloadBtn.className = \"dropDownItem\";\n  downloadBtn.innerText = \"Download\";\n  downloadBtn.addEventListener('click', function (ev) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    var fileName = target.querySelector('.file-name').innerText;\n    downloadFile(fileName, fileId);\n  });\n  var renameBtn = document.createElement('li');\n  renameBtn.className = \"dropDownItem\";\n  renameBtn.innerText = \"Rename\";\n  renameBtn.addEventListener('click', function (ev) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    rename(ev, fileId);\n  });\n\n  function rename(ev, file) {\n    Modal(ev, \"Rename\", \"Rename\", function (newObjectName) {\n      renameOnServer(file, newObjectName);\n    });\n  }\n\n  var deleteBtn = document.createElement('li');\n  deleteBtn.className = \"dropDownItem\";\n  deleteBtn.innerText = \"Delete\";\n  deleteBtn.addEventListener('click', function (ev) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    deleteFromServer(fileId);\n  });\n  var moveBtn = document.createElement('li');\n  moveBtn.className = \"dropDownItem\";\n  moveBtn.innerText = \"Move\";\n  moveBtn.addEventListener('click', function (ev) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    moveItem();\n  });\n  var dropDownMenu = document.createElement('ul');\n  dropDownMenu.className = \"dropdown-menu\";\n  dropDownMenu.classList.toggle('dropdown-visible');\n  dropDownMenu.style.position = \"fixed\";\n  dropDownMenu.style.top = \"\".concat(cors.y, \"px\");\n  dropDownMenu.style.left = \"\".concat(cors.x, \"px\");\n  dropDownMenu.appendChild(downloadBtn);\n  dropDownMenu.appendChild(renameBtn);\n  dropDownMenu.appendChild(deleteBtn);\n  dropDownMenu.appendChild(moveBtn);\n  target.appendChild(dropDownMenu);\n}\n\nfunction moveItem() {\n  if (state.isMoving) {\n    var newParent = getLocalStorageObjectItem('currentFolder');\n    var selectedItems = state.selectedItems;\n    console.log('selected: ', selectedItems);\n    selectedItems.forEach(function (item) {\n      fetch(\"/file/rename?id=\".concat(item, \"&to=\").concat(newParent), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n          'Access-Control-Allow-Origin': \"*\"\n        }\n      }).then(function (data) {\n        console.log(data);\n        renderFileStructure(getLocalStorageObjectItem('currentFolder'));\n      }).catch(function (error) {\n        return console.log(\"Данные не получены: \" + error);\n      });\n    });\n    state.isMoving = false;\n    state.selectedItems = \"\";\n  } else {\n    state.isMoving = true;\n    state.selectedItems = document.querySelectorAll('.item-active');\n  }\n}\n\nfunction renameOnServer(file, newName) {\n  fetch(\"/file/rename?id=\".concat(file, \"&newname=\").concat(newName), {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'text/plain',\n      'Access-Control-Allow-Origin': \"*\"\n    }\n  }).then(function (data) {\n    console.log(data);\n    renderFileStructure(getLocalStorageObjectItem('currentFolder'));\n  }).catch(function (error) {\n    return console.log(\"Данные не получены: \" + error);\n  });\n}\n\nfunction deleteFromServer(fileId) {\n  fetch(\"/file/delete?id=\".concat(fileId), {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'text/plain',\n      'Access-Control-Allow-Origin': \"*\"\n    }\n  }).then(function (data) {\n    console.log(data);\n    renderFileStructure(getLocalStorageObjectItem('currentFolder'));\n  }).catch(function (error) {\n    return console.log(\"Удаление не прошло: \" + error);\n  });\n}\n\nfunction downloadFile(fileName, fileId) {\n  fetch(\"/file/download?id=\".concat(fileId), {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'text/plain',\n      'Access-Control-Allow-Origin': \"*\"\n    }\n  }).then(function (response) {\n    return response.blob();\n  }).then(function (blob) {\n    return saveAs(blob, fileName);\n  }).catch(function (error) {\n    return console.log(\"Данные не получены: \" + error);\n  });\n}\n\nfunction Modal(ev) {\n  var modalTitle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"New folder\";\n  var buttonText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"create\";\n  var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : createNewFolderOnServer;\n  var createFolderModal = document.createElement('div');\n  createFolderModal.className = \"modal\";\n  createFolderModal.addEventListener('click', function (ev) {\n    if (ev.target === createFolderModal) {\n      closeModal();\n      renderFileStructure();\n    }\n  });\n  var crateFolderWrapper = document.createElement('div');\n  crateFolderWrapper.className = \"modal-wrapper\";\n  var nameField = document.createElement('input');\n  nameField.type = \"text\";\n  nameField.className = \"modal-fileName\";\n  nameField.focus();\n  var cancelBtn = document.createElement('button');\n  cancelBtn.innerText = \"cancel\";\n  cancelBtn.className = \"modal-cancelButton\";\n  cancelBtn.addEventListener('click', closeModal);\n  var createBtn = document.createElement('button');\n  createBtn.innerText = buttonText;\n  createBtn.className = \"modal-createButton\";\n  createBtn.addEventListener('click', function () {\n    callback(nameField.value);\n    closeModal();\n    renderFileStructure(getLocalStorageObjectItem('currentFolder'));\n  });\n\n  function closeModal(ev) {\n    document.getElementsByClassName('modal')[0].remove();\n  }\n\n  var modalButtonsWrapper = document.createElement('div');\n  modalButtonsWrapper.className = \"modalButtons-wrapper\";\n  var title = document.createElement('h2');\n  title.innerText = modalTitle;\n  crateFolderWrapper.appendChild(title);\n  crateFolderWrapper.appendChild(nameField);\n  modalButtonsWrapper.appendChild(cancelBtn);\n  modalButtonsWrapper.appendChild(createBtn);\n  crateFolderWrapper.appendChild(modalButtonsWrapper);\n  createFolderModal.appendChild(crateFolderWrapper);\n  document.getElementById(\"wrapper\").appendChild(createFolderModal);\n}\n\nfunction createNewFolderOnServer(name) {\n  fetch(\"/file/createfolder?name=\".concat(name, \"&parent=\").concat(getLocalStorageObjectItem('currentFolder')), {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'text/plain',\n      'Access-Control-Allow-Origin': \"*\"\n    }\n  }).then(function (data) {\n    renderFileStructure(getLocalStorageObjectItem('currentFolder'));\n    console.log(data);\n  }).catch(function (error) {\n    return console.log(\"Данные не получены: \" + error);\n  });\n}\n\nfunction renderFilePath() {\n  var folderId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"/\";\n\n  if (folderId !== getLocalStorageObjectItem('currentFolder')) {\n    var currentPath = getLocalStorageObjectItem('currentPath');\n    var pathItems = currentPath.split(',');\n    var index = pathItems.indexOf(folderId);\n    var newPath = pathItems.slice(0, index + 1);\n    filePath.innerHTML = \"\";\n    filePath.appendChild(rootFolder);\n    setLocalStorageObjectItem('currentPath', \"/\");\n    newPath.forEach(function (item) {\n      fetch(\"http://127.0.0.1:8000/file/getelement?id=\".concat(item), {\n        method: 'POST'\n      }).then(function (response) {\n        return response.text();\n      }).then(function (textOfResponse) {\n        return JSON.parse(textOfResponse);\n      }).then(function (data) {\n        if (data) {\n          addToFilePath(data[0]);\n        }\n      }).catch(function (error) {\n        return error;\n      });\n    });\n    console.log(newPath);\n  }\n}\n\nfunction addToFilePath(element) {\n  console.log('adding to path: ', element);\n  var path = getLocalStorageObjectItem('currentPath');\n  var newPath = \"\".concat(path, \",\").concat(element.fileId);\n  setLocalStorageObjectItem('currentPath', newPath);\n  var item = document.createElement('span');\n  item.className = \"file-path_item\";\n  item.innerText = \"\".concat(element.name, \"/\");\n  console.log(item);\n  item.dataset.parent = element.fileId;\n  item.addEventListener('click', function () {\n    renderFileStructure(element.fileId);\n    renderFilePath(element.fileId);\n  });\n  filePath.appendChild(item);\n} //***************************************//\n\n\nfunction setLocalStorageObjectItem(key, value) {\n  if (value === undefined) {\n    localStorage.removeItem(key);\n  } else {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n}\n\nfunction getLocalStorageObjectItem(key) {\n  var json = localStorage.getItem(key);\n\n  if (json === undefined) {\n    return undefined;\n  }\n\n  return JSON.parse(json);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ })

/******/ });